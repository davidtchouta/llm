# -*- coding: utf-8 -*-
"""llm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PoMizH0VFM37bf37qawM7cUvDgHba0tv
"""

import torch
import torch.nn as nn
import numpy as np
from torch.utils.data import Dataset, DataLoader
from collections import Counter

# Préparation des données
#text = "hello world hello neural networks hello pytorch"
# Remplacez 'chemin/vers/votre/fichier.txt' par le chemin réel vers votre fichier
with open('/content/lafontaine_short.txt', 'r', encoding='utf-8') as f:
    text = f.read()
#print(text)
chars = tuple(set(text))
print(chars)
int2char = dict(enumerate(chars))
print(int2char)
char2int = {char: idx for idx, char in int2char.items()}
print(char2int)

# Encodage du texte
encoded_text = np.array([char2int[char] for char in text])
print(encoded_text)

# Création d'un dataset
class CharDataset(Dataset):
    def __init__(self, data, sequence_length=10):
        self.data = data
        self.sequence_length = sequence_length

    def __len__(self):
        return len(self.data) - self.sequence_length

    def __getitem__(self, index):
        return (
            torch.tensor(self.data[index:index+self.sequence_length]),
            torch.tensor(self.data[index+1:index+self.sequence_length+1])
        )

dataset = CharDataset(encoded_text, sequence_length=10)
dataloader = DataLoader(dataset, batch_size=2, shuffle=True)
print(dataset)

#Définition du modèle
class CharRNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, n_layers=1):
        super(CharRNN, self).__init__()
        self.hidden_size = hidden_size
        self.n_layers = n_layers
        self.rnn = nn.RNN(input_size, hidden_size, n_layers, batch_first=True)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x, hidden):
        out, hidden = self.rnn(x, hidden)
        out = self.fc(out)
        return out, hidden

    def init_hidden(self, batch_size):
        return torch.zeros(self.n_layers, batch_size, self.hidden_size)

# Instanciation du modèle
model = CharRNN(len(chars), 128, len(chars))
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.005)

# Entraînement du modèle
def train(dataloader, model, loss_fn, optimizer, epochs=10):
    for epoch in range(epochs):
        hidden = model.init_hidden(batch_size=2)
        for batch, (X, y) in enumerate(dataloader):
            batch_size = X.size(0)  # Obtient la taille du lot actuel
            hidden = model.init_hidden(batch_size=batch_size)  # Initialise l'état caché en fonction de la taille du lot actuel
            # Préparation de l'entrée et des cibles
            X = nn.functional.one_hot(X, num_classes=len(chars)).float()
            y = y.view(-1)
            hidden = hidden.data

            # Calcul de la prédiction et de la perte
            pred, hidden = model(X, hidden)
            loss = loss_fn(pred.view(-1, len(chars)), y)

            # Backpropagation
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

        if epoch % 10 == 0:
            print(f'Epoch {epoch}, Loss: {loss.item()}')

# Lancer l'entraînement
train(dataloader, model, loss_fn, optimizer, epochs=100)

# Après l'entraînement
# 'model' est votre instance de modèle entraînée
# 'chemin_sauvegarde' est le chemin du fichier où sauvegarder l'état du modèle

chemin_sauvegarde = '/content/mon_modele_conv.pkl'
torch.save(model.state_dict(), chemin_sauvegarde)

device='cuda' if torch.cuda.is_available() else 'cpu'
print(device)

def generate(model, start_str='h', length=100, temperature=1.0):
    model.eval()
    chars = [c for c in start_str]
    hidden = model.init_hidden(1)

    for _ in range(length):
        input_seq = torch.tensor([[char2int[c] for c in chars[-model.n_layers:]]], dtype=torch.long)

        # S'assurer que num_classes correspond à la taille du vocabulaire
        num_classes = len(char2int)  # Correction ici pour utiliser la taille correcte
        input_seq = nn.functional.one_hot(input_seq, num_classes=num_classes).float()

        with torch.no_grad():
            output, hidden = model(input_seq, hidden)

        output_dist = output.data.view(-1).div(temperature).exp()
        top_char = torch.multinomial(output_dist, 1)[0]
        predicted_char = int2char[top_char.item()]
        chars.append(predicted_char)

    return ''.join(chars)

# Générer du texte avec le modèle
generated_text = generate(model, start_str='qu\'est-e qu\'on commade ?', length=400)
print(generated_text)

#Charger le modèle
#model = CharRNN(input_size, hidden_size, output_size, n_layers)  # Assurez-vous que l'architecture correspond
model = CharRNN(len(chars), 128, len(chars))
model.load_state_dict(torch.load('/content/mon_modele_conv.pkl'))
model.eval()  # Passer le modèle en mode évaluation

# Générer du texte avec le modèle
generated_text = generate(model, start_str='gondole', length=400)
print(generated_text)